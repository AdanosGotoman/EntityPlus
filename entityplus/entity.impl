//          Copyright Elnar Dakeshov 2017.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file ../LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)

#include <algorithm>
#include <initializer_list>

namespace entityplus {

#define ENTITY_MANAGER_TEMPS \
template <typename... CTs, typename... TTs> 

#define ENTITY_MANAGER_SPEC \
entity_manager<component_list<CTs...>, tag_list<TTs...>>

ENTITY_MANAGER_TEMPS
void ENTITY_MANAGER_SPEC::report_error(error_code_t errCode, const char * msg) const {
#ifdef ENTITYPLUS_NO_EXCEPTIONS
	handle_error(errCode, msg);
#else
	switch (errCode) {
	case entityplus::error_code_t::BAD_ENTITY:
		throw bad_entity(msg);
	case entityplus::error_code_t::INVALID_COMPONENT:
		throw invalid_component(msg);
	}
	// unreachable
	std::terminate();
#endif
}

ENTITY_MANAGER_TEMPS
auto ENTITY_MANAGER_SPEC::get_entity_and_status(const entity_t &entity) const -> std::pair<const entity_t*, entity_status> {
	auto local = entities.find(entity);
	if (local == entities.end())
		return{nullptr, entity_status::DELETED};

	if (entity.compTags != local->compTags)
		return{nullptr, entity_status::STALE};

	return{&*local, entity_status::OK};
}

#if !NDEBUG
ENTITY_MANAGER_TEMPS
auto ENTITY_MANAGER_SPEC::assert_entity(const entity_t &entity) const -> const entity_t&{
	auto entStatus = get_entity_and_status(entity);
	switch (entStatus.second) {
	case entity_status::DELETED:
		report_error(error_code_t::BAD_ENTITY,
					 "Entity has been deleted.");
	case entity_status::STALE:
		report_error(error_code_t::BAD_ENTITY,
					 "Entity's components/tags are stale. Don't store stale entities.");
	case entity_status::OK:
		return *entStatus.first;
	}
	// unreachable
	std::terminate();
}
#endif

ENTITY_MANAGER_TEMPS
template <typename T>
void ENTITY_MANAGER_SPEC::add_bit(entity_t &local, entity_t &foreign) {
	for (std::size_t i = 0; i < CompTagCount; ++i) {
		if (local.compTags[i]) {
			auto ent = entityCount[i].find(local);
			assert(ent != entityCount[i].end());
			meta::get<T>(ent->compTags) = true;
		}
	}

	meta::get<T>(local.compTags) =
		meta::get<T>(foreign.compTags) = true;

	auto &ecc = entityCount[meta::typelist_index_v<T, comp_tag_t>];
	auto emp = ecc.emplace(local);
	assert(emp.second);
}

ENTITY_MANAGER_TEMPS
template <typename T>
void ENTITY_MANAGER_SPEC::remove_bit(entity_t &local, entity_t &foreign) {
	meta::get<T>(local.compTags) =
		meta::get<T>(foreign.compTags) = false;

	for (std::size_t i = 0; i < CompTagCount; ++i) {
		if (local.compTags[i]) {
			auto ent = entityCount[i].find(local);
			assert(ent != entityCount[i].end());
			meta::get<T>(ent->compTags) = false;
		}
	}

	auto &ecc = entityCount[meta::typelist_index_v<T, comp_tag_t>];
	auto ece = ecc.erase(local);
	(void)ece; assert(ece == 1);
}

ENTITY_MANAGER_TEMPS
template <typename Component, typename... Args>
std::pair<Component&, bool> 
ENTITY_MANAGER_SPEC::add_component(entity_t &entity, const std::tuple<Args...> &args) {
#if NDEBUG
	auto &myEnt = *entities.find(entity);
#else
	auto &myEnt = assert_entity(entity);
#endif
	assert(meta::get<Component>(entity.compTags) == meta::get<Component>(myEnt.compTags));
	
	auto &container = meta::get<Component, component_list_t>(components);
	if (meta::get<Component>(entity.compTags)) {
		auto comp = container.find(entity.id);
		assert(comp != container.end());
		return{comp->second, false};
	}

	auto comp = container.emplace(entity.id, meta::from_tuple<Component>(args));
	assert(comp.second);

	add_bit<Component>(myEnt, entity);

	return {comp.first->second, true};
}

ENTITY_MANAGER_TEMPS
template <typename Component>
bool ENTITY_MANAGER_SPEC::remove_component(entity_t &entity) {
#if NDEBUG
	auto &myEnt = *entities.find(entity);
#else
	auto &myEnt = assert_entity(entity);
#endif
	assert(meta::get<Component>(entity.compTags) == meta::get<Component>(myEnt.compTags));
	if (!meta::get<Component>(entity.compTags)) {
		return false;
	}

	auto &container = meta::get<Component, component_list_t>(components);
	auto ce = container.erase(entity.id);
	(void)ce; assert(ce == 1);

	remove_bit<Component>(myEnt, entity);

	return true;
}

ENTITY_MANAGER_TEMPS
template <typename Component>
const Component& ENTITY_MANAGER_SPEC::get_component(const entity_t &entity) const {
#if !NDEBUG
	auto &myEnt = assert_entity(entity);
	assert(meta::get<Component>(entity.compTags) == meta::get<Component>(myEnt.compTags));
#endif
	if (!meta::get<Component>(entity.compTags)) {
		report_error(error_code_t::INVALID_COMPONENT,
					 "Tried to get a component the entity does not have");
	}

	const auto &container = meta::get<Component, component_list_t>(components);
	auto comp = container.find(entity.id);
	assert(comp != container.end());
	return comp->second;
}

ENTITY_MANAGER_TEMPS
template <typename Tag>
bool ENTITY_MANAGER_SPEC::set_tag(entity_t &entity, bool set) {
#if NDEBUG
	auto &myEnt = *entities.find(entity);
#else
	auto &myEnt = assert_entity(entity);
#endif
	assert(meta::get<Tag>(entity.compTags) == meta::get<Tag>(myEnt.compTags));

	bool old = meta::get<Tag>(entity.compTags);
	if (old != set) {
		if (set) add_bit<Tag>(myEnt, entity);
		else remove_bit<Tag>(myEnt, entity);
	}
	return old;
}

ENTITY_MANAGER_TEMPS
auto ENTITY_MANAGER_SPEC::create_entity() -> entity_t {
	assert(std::numeric_limits<detail::entity_id_t>::max() != currentId);
	auto emp = entities.emplace(typename entity_t::private_access{}, currentId++, this);
	assert(emp.second);

	return *emp.first;
}

ENTITY_MANAGER_TEMPS
void ENTITY_MANAGER_SPEC::delete_entity(const entity_t &entity) {
#if !NDEBUG
	assert_entity(entity);
#endif

	meta::for_each(components, [&](auto &container, std::size_t idx) {
		if (entity.compTags[idx]) {
			auto ce = container.erase(entity.id);
			(void)ce; assert(ce == 1);

			auto &ecc = entityCount[idx];
			auto ece = ecc.erase(entity);
			(void)ece; assert(ece == 1);
		}
	});
	
	for (std::size_t i = 0; i < TagCount; ++i) {
		if (entity.compTags[i + ComponentCount]) {
			auto &ecc = entityCount[i + ComponentCount];
			auto ece = ecc.erase(entity);
			(void)ece;
			assert(ece == 1);
		}
	}
	auto ers = entities.erase(entity); 
	(void)ers; assert(ers == 1);
}



ENTITY_MANAGER_TEMPS
template <typename... Ts>
auto ENTITY_MANAGER_SPEC::get_smallest_idx() ->entity_container& {
	if (sizeof...(Ts) == 0) return entities;

	std::array<std::size_t, sizeof...(Ts)> sortedThings = {meta::typelist_index_v<Ts, comp_tag_t>...};
	return entityCount[*std::min_element(sortedThings.begin(), sortedThings.end(), [&](const auto & lhs, const auto &rhs) {
		return entityCount[lhs].size() < entityCount[rhs].size();
	})];
}

namespace detail {
template <typename T, typename U>
struct make_key_impl;

template <typename... Ts, typename... Us>
struct make_key_impl<meta::typelist<Ts...>, meta::typelist<Us...>> {
	auto operator()() const {
		meta::type_bitset<meta::typelist<Us...>> ret;
		std::initializer_list<bool> _ = {(meta::get<Ts>(ret) = true)...};
		return ret;
	}
};

template <typename T, typename U>
auto make_key() {
	return make_key_impl<T, U>{}();
}
}

ENTITY_MANAGER_TEMPS
template<typename... Ts>
auto ENTITY_MANAGER_SPEC::get_entities() -> return_container {
	constexpr auto ArgSize = sizeof...(Ts);
	using Typelist = meta::typelist<Ts...>;
	using IsTypelistUnique = meta::is_typelist_unique<Typelist>;
	using IsTypelistValid = meta::and_all<meta::typelist_has_type<Ts, comp_tag_t>...>;
	return meta::eval_if(
		[&](auto) {
		if (ArgSize == 0) return return_container{entities.begin(), entities.end()};
		auto smallest = this->get_smallest_idx<Ts...>();

		return_container ret;
		ret.reserve(smallest.size());

		auto key = detail::make_key<Typelist, comp_tag_t>();

		for (const auto &ent : smallest) {
			if ((ent.compTags & key) == key)
				ret.push_back(ent);
		}
		return ret; },
		meta::fail_cond<IsTypelistUnique>([](auto delay) {
		static_assert(delay, "get_entitites called with a non-unique typelist");
		return std::declval<return_container>(); }),
		meta::fail_cond<IsTypelistValid>([](auto delay) {
		static_assert(delay, "get_entitites called with invalid typelist");
		return std::declval<return_container>();
	}));
}

namespace detail{
template <typename T, typename U> struct func_sig_no_control;
template <typename T, typename... Ts> struct func_sig_no_control<T, meta::typelist<Ts...>> {
	using type = void(T, Ts&...);
};

template <typename T, typename U> struct func_sig_with_control;
template <typename T, typename... Ts> struct func_sig_with_control<T, meta::typelist<Ts...>> {
	using type = void(T, Ts&..., control_block_t);
};

template <typename Iter>
struct data_t {
	Iter pos, end;
	bool useLinear;
};

template <typename Iter>
auto make_data(Iter begin, Iter end, bool use) {
	return data_t<Iter>{begin, end, use};
}

template <typename T, typename U> struct make_iters;
template <typename T, typename... Us> struct make_iters<T, meta::typelist<Us...>> {
	template <typename Container>
	auto operator()(Container &c, std::size_t smallestIdxSize, std::size_t maxLinearSearchDistance) const {
		(void)c; (void)smallestIdxSize; (void)maxLinearSearchDistance;
		return std::make_tuple(make_data(meta::get<Us, T>(c).begin(),
										 meta::get<Us, T>(c).end(),
										 meta::get<Us, T>(c).size()/smallestIdxSize < maxLinearSearchDistance)...);
	}
};

template <typename Func, typename Func2, typename T, typename... Ts, std::size_t... Is>
void deref_and_invoke_impl(Func &&func, Func2 &&func2, T &&t, std::tuple<Ts...> &iters,
						   std::index_sequence<Is...>) {
	(void)func; (void)func2; (void)iters;
	func(std::forward<T>(t), func2(std::get<Is>(iters))...);
}

template <typename Func, typename Func2, typename T, typename... Ts>
void deref_and_invoke(Func &&func, Func2 &&func2, T &&t, std::tuple<Ts...> &iters) {
	deref_and_invoke_impl(std::forward<Func>(func), std::forward<Func2>(func2),
						  std::forward<T>(t), iters, std::index_sequence_for<Ts...>{});
}

template <typename Func, typename Func2, typename T, typename... Ts, std::size_t... Is>
void deref_and_invoke_impl(Func &&func, Func2 &&func2, T &&t, std::tuple<Ts...> &iters,
						   control_block_t &control, std::index_sequence<Is...>) {
	(void)func; (void)func2; (void)iters; (void)control;
	func(std::forward<T>(t), func2(std::get<Is>(iters))..., control);
}

template <typename Func, typename Func2, typename T, typename... Ts>
void deref_and_invoke(Func &&func, Func2 &&func2, T &&t, std::tuple<Ts...> &iters,
					  control_block_t &control) {
	deref_and_invoke_impl(std::forward<Func>(func), std::forward<Func2>(func2),
						  std::forward<T>(t), iters, control, std::index_sequence_for<Ts...>{});
}
}

ENTITY_MANAGER_TEMPS
template<typename... Ts, typename Func>
void ENTITY_MANAGER_SPEC::for_each(Func && func) {
	using Typelist = meta::typelist<Ts...>;
	using ComponentsPart = meta::typelist_intersection_t<Typelist, component_t>;
	using IsFuncNoControl = std::is_constructible<
		std::function<typename detail::func_sig_no_control<entity_t, ComponentsPart>::type>,
		Func>;
	using IsFuncWithControl = std::is_constructible<
		std::function<typename detail::func_sig_with_control<entity_t, ComponentsPart>::type>,
		Func>;
	using IsFunc = meta::or_<IsFuncNoControl, IsFuncWithControl>;
	using IsTypelistUnique = meta::is_typelist_unique<Typelist>;
	using IsTypelistValid = meta::and_all<meta::typelist_has_type<Ts, comp_tag_t>...>;
	meta::eval_if(
		[&](auto) {
		auto smallest = this->get_smallest_idx<Ts...>();
		auto smallestIdxSize = smallest.size();
		if (smallestIdxSize == 0) return;
		auto iters = detail::make_iters<component_list_t, ComponentsPart>{}(components, smallestIdxSize, maxLinearSearchDistance);
		auto key = detail::make_key<Typelist, comp_tag_t>();
		control_block_t control;
		for (const auto &ent : smallest) {
			if ((ent.compTags & key) != key) continue;
			meta::for_each(iters, [&](auto &iter, std::size_t) {
				if (iter.useLinear) {
					while (iter.pos->first < ent.id) ++iter.pos;
				}
				else {
					iter.pos = std::lower_bound(iter.pos, iter.end, ent.id,
												[](const auto &it, const auto &val) {
						return it.first < val;
					});
				}
			});
			meta::eval_if(
				[&](auto) {
				detail::deref_and_invoke(func,
										 [](auto &iter) -> auto & { return iter.pos->second; },
										 ent, iters);},
				meta::fail_cond<IsFuncNoControl>([&](auto) {
				detail::deref_and_invoke(func,
										 [](auto &iter) -> auto & { return iter.pos->second; },
										 ent, iters, control);
				}));
			if (control.breakout) break;
		}},
		meta::fail_cond<IsTypelistUnique>([](auto delay) {
		static_assert(delay, "for_each called with a non-unique typelist");}),
		meta::fail_cond<IsTypelistValid>([](auto delay) {
		static_assert(delay, "for_each called with invalid typelist");}),
		meta::fail_cond<IsFunc>([](auto delay) {
		static_assert(delay, "for_each called with invalid callable");}));
}

#undef ENTITY_MANAGER_TEMPS
#undef ENTITY_MANAGER_SPEC
}
