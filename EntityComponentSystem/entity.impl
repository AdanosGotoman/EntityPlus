#include <algorithm>
#include <functional>
#include <initializer_list>

namespace entityplus {

#define ENTITY_MANAGER_TEMPS \
template <typename... Components, typename... Tags> 

#define ENTITY_MANAGER_SPEC \
entity_manager<component_list<Components...>, tag_list<Tags...>>

#if !NDEBUG
ENTITY_MANAGER_TEMPS
auto ENTITY_MANAGER_SPEC::assert_entity(const entity_t &entity) const -> const entity_t& {
	if (entity.entityManager_ != this) {
#ifdef ENTITYPLUS_NO_EXCEPTIONS
		handle_error(error_code_t::BAD_ENTITY);
#else
		throw bad_entity_exception("Entity not owned by this manager. It is possible that the manager may have moved.");
#endif
	}
	auto ent = entities_.find(entity);
	if (ent == entities_.end()) {
#ifdef ENTITYPLUS_NO_EXCEPTIONS
		handle_error(error_code_t::BAD_ENTITY);
#else
		throw bad_entity_exception("Entity can't be found in manager. Are you sure it's valid?");
#endif
	}
	return *ent;
}
#endif
ENTITY_MANAGER_TEMPS
template <typename T>
void ENTITY_MANAGER_SPEC::add_bit(entity_t &local, entity_t &foreign) {
	for (std::size_t i = 0; i < CompTagCount; ++i) {
		if (local.compTags_[i]) {
			auto ent = entityCount_[i].find(local);
			assert(ent != entityCount_[i].end());
			meta::get<T>(const_cast<entity_t &>(*ent).compTags_) = true;
		}
	}

	meta::get<T>(local.compTags_) =
		meta::get<T>(foreign.compTags_) = true;

	auto &ecc = entityCount_[meta::typelist_index_v<T, comp_tag_t>];
	auto emp = ecc.emplace(local);
	assert(emp.second);
}

ENTITY_MANAGER_TEMPS
template <typename T>
void ENTITY_MANAGER_SPEC::remove_bit(entity_t &local, entity_t &foreign) {
	meta::get<T>(local.compTags_) =
		meta::get<T>(foreign.compTags_) = false;

	for (std::size_t i = 0; i < CompTagCount; ++i) {
		if (local.compTags_[i]) {
			auto ent = entityCount_[i].find(local);
			assert(ent != entityCount_[i].end());
			meta::get<T>(const_cast<entity_t &>(*ent).compTags_) = false;
		}
	}

	auto &ecc = entityCount_[meta::typelist_index_v<T, comp_tag_t>];
	auto ec = ecc.find(local);
	assert(ec != ecc.end());
	ecc.erase(ec);
}

ENTITY_MANAGER_TEMPS
template <typename Component, typename... Args>
std::pair<Component&, bool> ENTITY_MANAGER_SPEC::add_component(entity_t &entity, Args&&... args) {
#if NDEBUG
	auto &myEnt = const_cast<entity_t &>(*entities_.find(entity));
#else
	auto &myEnt = assert_entity(entity);
#endif
	assert(meta::get<Component>(entity.compTags_) == meta::get<Component>(myEnt.compTags_));
	
	auto &container = meta::get<Component, component_list_t>(components_);
	if (meta::get<Component>(entity.compTags_)) {
		auto comp = container.find(entity.id_);
		assert(comp != container.end());
		return{comp->second, false};
	}

	auto comp = container.emplace(entity.id_, Component(std::forward<Args>(args)...));
	assert(comp.second);

	add_bit<Component>(myEnt, entity);

	return {comp.first->second, true};
}

ENTITY_MANAGER_TEMPS
template <typename Component>
bool ENTITY_MANAGER_SPEC::remove_component(entity_t &entity) {
#if NDEBUG
	auto &myEnt = const_cast<entity_t &>(*entities_.find(entity));
#else
	auto &myEnt = assert_entity(entity);
#endif
	assert(meta::get<Component>(entity.compTags_) == meta::get<Component>(myEnt.compTags_));
	if (!meta::get<Component>(entity.compTags_)) {
		return false;
	}

	auto &container = meta::get<Component, component_list_t>(components_);
	auto comp = container.find(entity.id_);
	assert(comp != container.end());
	container.erase(comp);

	remove_bit<Component>(myEnt, entity);

	return true;
}

ENTITY_MANAGER_TEMPS
template <typename Component>
const Component& ENTITY_MANAGER_SPEC::get_component(const entity_t &entity) const {
#if !NDEBUG
	auto &myEnt = assert_entity(entity);
#endif
	assert(meta::get<Component>(entity.compTags_) == meta::get<Component>(myEnt.compTags_));
	if (!meta::get<Component>(entity.compTags_)) {
#ifdef ENTITYPLUS_NO_EXCEPTIONS
		handle_error(error_code_t::INVALID_COMPONENT);
#else
		throw invalid_component<Component>("Tried to get a component the entity does not have");
#endif
	}

	const auto &container = meta::get<Component, component_list_t>(components_);
	auto comp = container.find(entity.id_);
	assert(comp != container.end());
	return comp->second;
}

ENTITY_MANAGER_TEMPS
template <typename Tag>
bool ENTITY_MANAGER_SPEC::set_tag(entity_t &entity, bool set) {
#if NDEBUG
	auto &myEnt = const_cast<entity_t &>(*entities_.find(entity));
#else
	auto &myEnt = assert_entity(entity);
#endif
	assert(meta::get<Tag>(entity.compTags_) == meta::get<Tag>(myEnt.compTags_));

	bool old = meta::get<Tag>(entity.compTags_);
	if (old != set) {
		if (set) add_bit<Tag>(myEnt, entity);
		else remove_bit<Tag>(myEnt, entity);
	}
	return old;
}

ENTITY_MANAGER_TEMPS
auto ENTITY_MANAGER_SPEC::create_entity() -> entity_t {
	assert(std::numeric_limits<detail::entity_id_t>::max() != currentId_);
	auto emp = entities_.emplace(entity_t::private_access{}, currentId_++, this);
	assert(emp.second);

	return *emp.first;
}

ENTITY_MANAGER_TEMPS
void ENTITY_MANAGER_SPEC::delete_entity(const entity_t &entity) {
#if !NDEBUG
	assert_entity(entity);
#endif

	meta::for_each(components_, [&](auto &container, std::size_t idx) {
		if (entity.compTags_[idx]) {
			auto comp = container.find(entity.id_);
			assert(comp != container.end());
			container.erase(comp);

			auto &ecc = entityCount_[idx];
			auto ec = ecc.find(entity);
			assert(ec != ecc.end());
			ecc.erase(ec);
		}
	});
	
	for (std::size_t i = 0; i < TagCount; ++i) {
		if (entity.compTags_[i + ComponentCount]) {
			auto &ecc = entityCount_[i + ComponentCount];
			auto ec = ecc.find(entity);
			assert(ec != ecc.end());
			ecc.erase(ec);
		}
	}
	entities_.erase(entity);
}

ENTITY_MANAGER_TEMPS
template <typename... Ts>
std::size_t ENTITY_MANAGER_SPEC::get_smallest_idx() {
	std::array<std::size_t, sizeof...(Ts)> sortedThings = {meta::typelist_index_v<Ts, comp_tag_t>...};
	return *std::min_element(sortedThings.begin(), sortedThings.end(), [&](const auto & lhs, const auto &rhs) {
		return entityCount_[lhs].size() < entityCount_[rhs].size();
	});
}

namespace detail {
template <typename T, typename U>
struct make_key_impl;

template <typename... Ts, typename... Us>
struct make_key_impl<meta::typelist<Ts...>, meta::typelist<Us...>> {
	auto operator()() const {
		meta::type_bitset<meta::typelist<Us...>> ret;
		std::initializer_list<bool> _ = {(meta::get<Ts>(ret) = true)...};
		return ret;
	}
};

template <typename T, typename U>
auto make_key() {
	return make_key_impl<T, U>{}();
}
}

ENTITY_MANAGER_TEMPS
template<typename... Ts>
auto ENTITY_MANAGER_SPEC::get_entities() -> return_container {
	using TypelistUnique = meta::is_typelist_unique<meta::typelist<Ts...>>;
	using TypelistValid = meta::and_all<meta::typelist_has_type<Ts, comp_tag_t>...>;
	return meta::eval_if(
		[&](const std::false_type &) {
		auto smallestIdx = get_smallest_idx<Ts...>();

		return_container ret;
		ret.reserve(entityCount_[smallestIdx].size());

		auto key = detail::make_key<meta::typelist<Ts...>, comp_tag_t>();

		for (auto it = entityCount_[smallestIdx].begin(); it != entityCount_[smallestIdx].end(); ++it) {
			if ((it->compTags_ & key) == key)
				ret.push_back(*it);
		}
		return ret; },
		meta::fail_cond<TypelistUnique>([](auto delay) {
		static_assert(delay, "get_entitites called with a non-unique typelist");
		return std::declval<return_container>(); }),
		meta::fail_cond<TypelistValid>([](auto delay) {
		static_assert(delay, "get_entitites called with invalid typelist");
		return std::declval<return_container>();
	}));
}

namespace detail{
template <typename T, typename U> struct func_sig;
template <typename T, typename... Ts> struct func_sig<T, meta::typelist<Ts...>> {
	using type = void(T, Ts&...);
};

template <typename T, typename U> struct make_iters;
template <typename T, typename... Us> struct make_iters<T, meta::typelist<Us...>> {
	template <typename Container>
	auto operator()(Container &c) const {
		return std::make_tuple(meta::get<Us, T>(c).begin()...);
	}
};

template <typename Func, typename Func2, typename T, typename... Ts, std::size_t... Is>
void deref_and_invoke_impl(Func &&func, Func2 &&func2, T &&t, std::tuple<Ts...> &iters,
						   std::index_sequence<Is...>) {
	func(std::forward<T>(t), func2(std::get<Is>(iters))...);
}

template <typename Func, typename Func2, typename T, typename... Ts>
void deref_and_invoke(Func &&func, Func2 &&func2, T &&t, std::tuple<Ts...> &iters) {
	deref_and_invoke_impl(std::forward<Func>(func), std::forward<Func2>(func2),
						  std::forward<T>(t), iters, std::index_sequence_for<Ts...>{});
}
}

ENTITY_MANAGER_TEMPS
template<typename... Ts, typename Func>
void ENTITY_MANAGER_SPEC::for_each(Func && func) {
	using Typelist = meta::typelist<Ts...>;
	using ComponentsPart = meta::typelist_intersection_t<Typelist, component_t>;
	using IsFunc = std::is_constructible<std::function<typename detail::func_sig<entity_t, ComponentsPart>::type>, Func>;
	using TypelistUnique = meta::is_typelist_unique<Typelist>;
	using TypelistValid = meta::and_all<meta::typelist_has_type<Ts, comp_tag_t>...>;
	meta::eval_if(
		[&](const std::false_type &) {
		auto smallestIdx = get_smallest_idx<Ts...>();
		auto iters = detail::make_iters<component_list_t, ComponentsPart>{}(components_);
		auto key = detail::make_key<Typelist, comp_tag_t>();
		for (const auto &ent : entityCount_[smallestIdx]) {
			if ((ent.compTags_ & key) != key) continue;
			meta::for_each(iters, [&](auto &iter, std::size_t) {
				while (iter->first < ent.id_) ++iter;
			});
			detail::deref_and_invoke(func,
								   [](auto &iter) -> auto &  { return iter->second; },
								   ent, iters);
		}},
		meta::fail_cond<TypelistUnique>([](auto delay) {
		static_assert(delay, "for_each called with a non-unique typelist");}),
		meta::fail_cond<TypelistValid>([](auto delay) {
		static_assert(delay, "for_each called with invalid typelist");}),
		meta::fail_cond<IsFunc>([](auto delay) {
		static_assert(delay, "for_each called with invalid callable");
	}));
}

#undef ENTITY_MANAGER_TEMPS
#undef ENTITY_MANAGER_SPEC
}
