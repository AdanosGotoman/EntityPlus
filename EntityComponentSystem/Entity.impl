#include <algorithm>

template <class... Components, class... Tags>
void 
EntityManager<ComponentList<Components...>, TagList<Tags...>>
::assertEntity(const MyEntity &entity) {
	if (entity.entityManager_ != this) {
		throw bad_entity_exception("Entity not owned by this manager. It is possible that the manager may have moved.");
	}
	/*if (entity.version_ != version_) {
		throw bad_entity_exception("Entity version not the same as Managers. Don't reuse Entitites between step() calls");
	}
	if (entity.id_ >= entities_.size()) {
		throw bad_entity_exception("Entity ID is invalid. Please submit a bug (this shouldn't happen).");
	}*/
}

template <class... Components, class... Tags>
template <class Component, typename... Args>
std::pair<Component&, bool> 
EntityManager<ComponentList<Components...>, TagList<Tags...>>
::addComponent(MyEntity &entity, Args&&... args) {
	assertEntity(entity);

	auto &container = ComponentList::get<Component>(components_);

	if (entity.components_.at<Component>()) {
		return {container.at(entity.id_), false};
	}

	entity.components_.at<Component>() =
	std::binary_search(entites_.begin(), entities_.end(), [id = entity.id_](const auto &elm) {
		return elm.id_ == id;
	}).components_.at<Component>() = true;

	return{*container.emplace(std::piecewise_construct,
							   std::forward_as_tuple(entity.id_),
							   std::forward_as_tuple(std::forward<Args>(args)...)),
		true};
}

template <class... Components, class... Tags>
template <class Component>
bool
EntityManager<ComponentList<Components...>, TagList<Tags...>>
::removeComponent(MyEntity &entity) {
	assertEntity(entity); 

	if (!entity.components_.at<Component>()) {
		return false;
	}

	entity.components_.at<Component>() =
	std::binary_search(entites_.begin(), entities_.end(), [id = entity.id_](const auto &elm) {
		return elm.id_ == id;
	}).components_.at<Component>() = false;

	auto &container = ComponentList::get<Component>(components_);
	container.erase(container.find(entity.id_));
	return true;
}

template <class... Components, class... Tags>
template <class Component>
const Component & 
EntityManager<ComponentList<Components...>, TagList<Tags...>>
::getComponent(const MyEntity &entity) const {
	assertEntity(entity);
	if (!entity.components_.at<Component>()) {
		throw invalid_component<Component>("Tried to get a component the entity does not have");
	}

}

template <class... Components, class... Tags>
template <class Tag>
bool
EntityManager<ComponentList<Components...>, TagList<Tags...>>
::setTag(MyEntity &entity, bool set) {
	return false;
}

template <class... Components, class... Tags>
typename EntityManager<ComponentList<Components...>, TagList<Tags...>>::MyEntity
EntityManager<ComponentList<Components...>, TagList<Tags...>>
::createEntity() {
	entities_.emplace_back(entities_.size(), version_, this);
	return entities_.back();
}

template <class... Components, class... Tags>
typename EntityManager<ComponentList<Components...>, TagList<Tags...>>::MyEntity
EntityManager<ComponentList<Components...>, TagList<Tags...>>
void
::deleteEntity(const MyEntity &) {

}